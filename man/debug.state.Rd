% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/debugState.R
\name{debug.state}
\alias{debug.state}
\title{The State at a Line}
\usage{
debug.state(..., script.num = 1)
}
\arguments{
\item{...}{The line numbers to be queried.}

\item{script.num}{The script number of the queried line numbers. This is ignored
if no line numbers are given.
Allows for only 1 script number to be queried per function call.
Defaults to script number 1 (main script).}
}
\value{
A list of data frames of states for each queried line number, or the state
        at the end of execution if no parameters are given to the function.
}
\description{
For each queried line, debug.state returns a data frame showing the state
at that line. This assumes that the given line has been executed.
Each data frame contains the following columns:
\itemize{
	\item name: The names of variables in the state.
	\item value: The value of each variable.
	\item container: The type of the container of each variable.
	\item dimension: The size of the container.
	\item type: The data type(s) contained within the container.
	\item scriptNum: The script number associated with each variable.
	\item startLine: The line number associated with each variable.
}
If no paramters are given, debug.state will return the state at the end of
execution.
}
\details{
debug.state belongs to provDebugR, a debugger which utilises provenance collected
post-execution to facilitate understanding of the execution and aid in debugging.

This function may be used only after the debugger has been initialised using
one its initialisation functions (listed below).
}
\examples{
\dontrun{
prov.debug.run("test.R")
debug.state()
debug.state(5)
debug.state(10, 20, script.num = 2)
}

}
\seealso{
provDebugR Initialisation Functions:

\code{\link{prov.debug}}

\code{\link{prov.debug.file}}

\code{\link{prov.debug.run}}

Other provDebugR Functions (non-initialisation):

\code{\link{debug.error}}: Returns the backwards lineage of the error, if any.
             The error may be queried on StackOverflow.

\code{\link{debug.line}}: Returns all immediate inputs and outputs
             for the line(s) queried.

\code{\link{debug.lineage}}: Returns the forwards or backwards lineage
             of the data object(s) queried. The forwards lineage shows how the
             data object was used, and the backwards lineage shows how it was produced.

\code{\link{debug.type.changes}}: Returns a data frame for each variable in
             the execution containing the instances where the data type changed.

\code{\link{debug.variable}}: Returns a data frame showing all instances
             of the variable(s) queried.

\code{\link{debug.warning}}: Returns the backwards lineage of the queried
             warning(s), if any.
}
