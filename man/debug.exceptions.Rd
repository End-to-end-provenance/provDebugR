% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/debugExceptions.R
\name{debug.error}
\alias{debug.error}
\alias{debug.warning}
\title{Tracking the Lineage of Errors and Warnings}
\usage{
debug.error(stack.overflow = FALSE)

debug.warning(..., all = FALSE)
}
\arguments{
\item{stack.overflow}{If TRUE, the error message will be searched for on Stack Overflow.}

\item{...}{The warning(s) to be queried.}

\item{all}{If TRUE, the lineages of all warnings are returned.}
}
\value{
debug.error returns a data frame representing the backwards lineage 
of the error in the execution, if any.

debug.warning returns a list of data frames of lineages for the queried 
        warnings.
}
\description{
debug.error returns a data frame representing the backwards lineage of (the 
steps leading up to) the error in the execution, if any.

debug.warning returns a data frame representing the backwards lineage for 
each warning queried.
}
\details{
Each data frame returned by debug.error and debug.warning contains the 
following columns:
\itemize{
	\item scriptNum: The script number the data node is associated with.
	\item startLine: The line number the data node is associated with.
	\item code: The line of code which used/produced the data node.
}

debug.error and debug.warning belong to provDebugR, a debugger which utilises 
provenance collected post-execution to facilitate understanding of the
execution and aid in debugging.

These functions may be used only after the debugger has been initialised using
one its initialisation functions (listed below).
}
\examples{
\dontrun{
prov.debug.run("test.R")

debug.error()
debug.error(stack.overflow = TRUE)

debug.warning(1)
debug.warning(2,3)
debug.warning(all = TRUE)
}

}
\seealso{
provDebugR Initialisation Functions:

\code{\link{prov.debug}}

\code{\link{prov.debug.file}}

\code{\link{prov.debug.run}}

Other provDebugR Functions (non-initialisation):

\code{\link{debug.line}}: Returns all immediate inputs and outputs
             for the line(s) queried.

\code{\link{debug.lineage}}: Returns the forwards or backwards lineage
             of the data object(s) queried. The forwards lineage shows how the
             data object was used, and the backwards lineage shows how it was produced.

\code{\link{debug.state}}: Returns the state at the line(s) queried,
             after the line had been executed. The state is the list of all 
             variables and their values in the environment at the queried line.

\code{\link{debug.type.changes}}: Returns a data frame for each variable in
             the execution containing the instances where the data type changed.

\code{\link{debug.variable}}: Returns a data frame showing all instances
             of the variable(s) queried.

\code{\link{debug.view}}: Opens and displays the contents of each file or variable
             or variable queried.
}
