% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/debugVariable.R
\name{debug.variable}
\alias{debug.variable}
\title{Tracking Changes to a Variable}
\usage{
debug.variable(..., val.type = NA, script.num = 1, all = FALSE)
}
\arguments{
\item{...}{The variable names to be queried.}

\item{val.type}{Optional. If not NA, this filters the results to contain
only instances where the valType (container or type) has the
queried type. Only one type may be queried per function call.}

\item{script.num}{The script number of the queried variables.
Defaults to script number 1 (main script).}

\item{all}{If TRUE, results for all variables of the specified script will be
returned.}
}
\value{
A list of data frames showing all instances of each variable queried.
}
\description{
For each variable queried, debug.variable returns a data frame of all
instances (data nodes) of that variable.
Each data frame contains the following columns:
\itemize{
	\item value: The value of the variable.
	\item container: The type of the container of the variable.
	\item dimension: The size of the container.
	\item type: The data type(s) contained within the container.
	\item scriptNum: The script number the variable is associated with.
	\item startLine: The line number the variable is associated with.
}
}
\details{
debug.variable belongs to provDebugR, a debugger which utilises provenance 
collected post-execution to facilitate understanding of the execution and aid 
in debugging.

This function may be used only after the debugger has been initialised using
one its initialisation functions (listed below).
}
\examples{
\dontrun{
prov.debug.run("test.R")
debug.variable("x")
debug.variable(all = TRUE)
debug.variable("a", "b", "x", val.type = "logical")
debug.variable("a", "b", "x", script.num = 3)
}

}
\seealso{
provDebugR Initialisation Functions:

\code{\link{prov.debug}}

\code{\link{prov.debug.file}}

\code{\link{prov.debug.run}}

Other provDebugR Functions (non-initialisation):

\code{\link{debug.error}}: Returns the backwards lineage of the error, if any.
             The error may be queried on StackOverflow.

\code{\link{debug.line}}: Returns all immediate inputs and outputs
             for the line(s) queried.

\code{\link{debug.lineage}}: Returns the forwards or backwards lineage
             of the data object(s) queried. The forwards lineage shows how the
             data object was used, and the backwards lineage shows how it was produced.

\code{\link{debug.state}}: Returns the state at the line(s) queried,
             after the line had been executed. The state is the list of all 
             variables and their values in the environment at the queried line.

\code{\link{debug.type.changes}}: Returns a data frame for each variable in
             the execution containing the instances where the data type changed.

\code{\link{debug.warning}}: Returns the backwards lineage of the queried
             warning(s), if any.
}
