% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/debugLine.R
\name{debug.line}
\alias{debug.line}
\title{Tracking the Inputs and Outputs at a Line}
\usage{
debug.line(..., script.num = 1, all = FALSE)
}
\arguments{
\item{...}{The line numbers to be queried.}

\item{script.num}{The script numbers to be queried.
Defaults to script number 1 (main script).
If script.num == "all", all possible script numbers will be queried.}

\item{all}{If TRUE, the inputs and outputs for all lines in all script numbers
will be returned.}
}
\value{
A list of data frames showing the inputs and outputs for the procedure
        in each line queried.
}
\description{
For each line number queried, debug.line returns a data frame of the data 
that the procedure in that line inputs and outputs.
Each data frame contains the following columns:
\itemize{
	\item name: The name of the data.
	\item value: The value of the data.
	\item container: The type of the container of the data.
	\item dimension: The size of the container.
	\item type: The data type(s) contained within the container.
}
}
\details{
debug.line belongs to provDebugR, a debugger which utilises provenance collected
post-execution to facilitate understanding of the execution and aid in debugging.

This function may be used only after the debugger has been initialised using
one its initialisation functions (listed below).
}
\examples{
\dontrun{
prov.debug.run("test.R")
debug.line(5)
debug.line(all = TRUE)
debug.line(5, 10, script.num = 2)
debug.line(3, script.num = "all")
}

}
\seealso{
provDebugR Initialisation Functions:

\code{\link{prov.debug}}

\code{\link{prov.debug.file}}

\code{\link{prov.debug.run}}

Other provDebugR Functions (non-initialisation):

\code{\link{debug.error}}: Returns the backwards lineage of the error, if any.
             The error may be queried on StackOverflow.

\code{\link{debug.lineage}}: Returns the forwards or backwards lineage
             of the data object(s) queried. The forwards lineage shows how the
             data object was used, and the backwards lineage shows how it was produced.

\code{\link{debug.state}}: Returns the state at the line(s) queried,
             after the line had been executed. The state is the list of all 
             variables and their values in the environment at the queried line.

\code{\link{debug.type.changes}}: Returns a data frame for each variable in
             the execution containing the instances where the data type changed.

\code{\link{debug.variable}}: Returns a data frame showing all instances
             of the variable(s) queried.

\code{\link{debug.view}}: Opens and displays the contents of each file or variable
             or variable queried.

\code{\link{debug.warning}}: Returns the backwards lineage of the queried
             warning(s), if any.
}
